package cmd

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/printer"
	"go/token"
	"os"
)

// Generate generates the enum code for the given type name and output file using GOFILE environment variable.
func Generate(typeName string) error {
	e, err := newEnum(typeName)
	if err != nil {
		return fmt.Errorf("failed to find enum %s: %w", typeName, err)
	}

	//importDecl := &ast.GenDecl{
	//	Tok: token.IMPORT,
	//	Specs: []ast.Spec{
	//		&ast.ImportSpec{
	//			Path: &ast.BasicLit{Kind: token.STRING, Value: `"fmt"`},
	//		},
	//	},
	//}

	file := &ast.File{
		Name: ast.NewIdent(e.PackageName),
		Decls: []ast.Decl{
			//importDecl,
			e.genMapVar(),
			e.genConstantCompilerFunc(),
			e.genNamesFunc(),
			e.genValuesFunc(),
			e.genIsMethod(),
		},
	}
	// write the file to the output path
	{
		buf := &bytes.Buffer{}
		buf.WriteString("// Code generated by piteego/enums; DO NOT EDIT.\n")

		fs := token.NewFileSet()

		buf.WriteString(fmt.Sprintf("package %s", e.PackageName))
		buf.WriteString("\n\n")
		cfg := &printer.Config{Mode: printer.UseSpaces, Tabwidth: 4}
		for i, decl := range file.Decls {
			if err := cfg.Fprint(buf, fs, decl); err != nil {
				return fmt.Errorf("failed to write decl to buffer: %v", err)
			}
			if i < len(file.Decls)-1 {
				buf.WriteString("\n\n")
			}
		}

		if err := os.WriteFile(e.OutputPath, buf.Bytes(), 0644); err != nil {
			return fmt.Errorf("failed to write buffer to file: %v", err)
		}
	}
	fmt.Printf("Successfully generated new code: %s \n", e.OutputPath)
	return nil
}
